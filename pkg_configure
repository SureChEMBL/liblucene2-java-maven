#!/usr/bin/env python

import errno
import jinja2
import os
import shutil

TMP_DIR = 'tmp'

ARTIFACT_GROUP_ID = 'org.apache.lucene'
ARTIFACT_GROUP_MAVEN_DIR = 'org/apache/lucene'
ARTIFACT_IDS = [
    'lucene-core',
    'lucene-analyzers',
    'lucene-smartcn',
    'lucene-ant',
    'lucene-memory',
    'lucene-regex',
    'lucene-highlighter',
    'lucene-fast-vector-highlighter',
    'lucene-benchmark',
    'lucene-misc',
    'lucene-collation',
    'lucene-bdb',
    'lucene-bdb-je',
    'lucene-instantiated',
    'lucene-lucli',
    'lucene-queries',
    'lucene-queryparser',
    'lucene-remote',
    'lucene-snowball',
    'lucene-spatial',
    'lucene-spellchecker',
    'lucene-surround',
    'lucene-swing',
    'lucene-wikipedia',
    'lucene-wordnet',
    'lucene-xml-query-parser',
]
ARTIFACT_VERSION = '2.9.x'

POM_TMPL_FNAME = 'pom.xml.j2'
LINKS_TMPL_FNAME = 'links.j2'
LINKS_FNAME = 'links'

MAVEN_REPO_DIR = 'usr/share/maven-repo'
ORIGINAL_JAR_DIR = 'usr/share/java'


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def tmpl2file(tmpl_fname, dest_path, args):
    script_dir = os.path.dirname(os.path.realpath(__file__))
    j2_env = jinja2.Environment(
        loader = jinja2.FileSystemLoader(script_dir))

    tmpl = j2_env.get_template(tmpl_fname)

    rendered = tmpl.render(args)
    open(dest_path, 'w').write(rendered)

def get_artifact_maven_dir(artifact_id):
    return os.path.join(
        MAVEN_REPO_DIR,
        ARTIFACT_GROUP_MAVEN_DIR, artifact_id, ARTIFACT_VERSION)

def get_pom_fname(artifact_id):
    return '{0}-{1}.pom'.format(artifact_id, ARTIFACT_VERSION)

def get_full_pom_path(artifact_id):
    return os.path.join(
        get_artifact_maven_dir(artifact_id),
        get_pom_fname(artifact_id))

def get_orig_jar_fname(artifact_id):
    return '{0}.jar'.format(artifact_id)

def get_full_orig_jar_path(artifact_id):
    return os.path.join(ORIGINAL_JAR_DIR, get_orig_jar_fname(artifact_id))

def get_dest_jar_fname(artifact_id):
    return '{0}-{1}.jar'.format(artifact_id, ARTIFACT_VERSION)

def get_full_dest_jar_path(artifact_id):
    return os.path.join(get_artifact_maven_dir(artifact_id),
                        get_dest_jar_fname(artifact_id))

def create_pom(artifact_id):
    dest_dir = os.path.join(TMP_DIR, get_artifact_maven_dir(artifact_id))
    mkdir_p(dest_dir)

    tmpl_args = {
        'group_id': ARTIFACT_GROUP_ID,
        'artifact_id': artifact_id,
        'version': ARTIFACT_VERSION
    }
    tmpl2file(POM_TMPL_FNAME,
              os.path.join(TMP_DIR, get_full_pom_path(artifact_id)),
              tmpl_args)

def create_poms():
    for artifact_id in ARTIFACT_IDS:
        create_pom(artifact_id)

def create_symlinks():
    symlinks = []
    for artifact_id in ARTIFACT_IDS:
        args = {
            'orig': os.path.join('/', get_full_orig_jar_path(artifact_id)),
            'dest': os.path.join('/', get_full_dest_jar_path(artifact_id)),
        }
        symlinks.append(args)

    tmpl2file(
        LINKS_TMPL_FNAME,
        os.path.join(TMP_DIR, LINKS_FNAME),
        { 'symlinks': symlinks })

def cleanup():
    shutil.rmtree(TMP_DIR, True)
    os.mkdir(TMP_DIR)

def main():
    cleanup()
    create_poms()
    create_symlinks()

if __name__ == "__main__":
    main()
